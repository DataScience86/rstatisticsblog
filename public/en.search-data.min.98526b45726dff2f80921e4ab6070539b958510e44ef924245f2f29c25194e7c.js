'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/quick-r-tutorial/introduction-to-r/','title':"Getting Started",'content':"Introduction In this quick tutorial, we will cover essential concepts of R programming language. It is not a zero to hero tutorial. However, this course does proffer you with all the necessary information to achieve data analysis related tasks in R.\nInstallation The installation of R software is pretty straight forward and is like any other software. First, you need to download the R software IDE (Interactive Development Environments).\nDownload R\r\rIf you have installed the R software as guided. You can move forward and download the most popular and famous IDE called RStudio.\nWhy R Studio\nRStudio is a collection of integrated tools that will help you to be more productive. The IDE includes a console, syntax-highlighting editor, plotting tools, and supports direct code execution. It also allows one to view history, debug, and manage workspace.\r\rDownload RStudio\r\rNote\nRStudio requires R 3.0.1+.\r\rFrequently asked questions?   Question 1 - What is CRAN ?\nCRAN stands for Comprehensive R Archive Network. This network is a collection of (File Transfer Protocol)FTP, and web servers present around the world.\n  Question 2 - What does this collection of servers comprise of?\nOn these web servers, which are placed all over the world, you can find R source code, documentation, contributed packages, R manuals, and datasets.\n  Question 3 - What is a CRAN mirror?\nEach web server of the network is a mirror.\n  Question 4 - Why do we have so many CRAN mirrors?\nThe idea was to reduce long-distance or international traffic. You can find a list of CRAN mirrors at CRAN mirrors.\n  Question 5 - How can I permanently save information about my preferred CRAN mirror?\nThe information about the CRAN mirror gets saved in a file named .RProfile. This file is present in the user\u0026rsquo;s home directory. For example, one can use the below line of code to add Sweden as your permanent mirror in .RProfile file.\n  options(\u0026quot;repos\u0026quot; = c(CRAN = \u0026quot;https://ftp.acc.umu.se/mirror/CRAN/\u0026quot;))\r  Question 6 - Can I download previous RGui version?\nYes, you can download the source code of older versions of R. Here is the link to the page from where you can download the older versions.\n  Question 7 - How do I update my R software?\nYou can use installr package to update your R software on windows. Use the below code to install the package and update the software.\n  # Downloading the package from CRAN\rinstall.packages(\u0026quot;installr\u0026quot;)\r# Loading the package\rlibrary(installr)\r# Use update function to update.\rupdateR()\r"});index.add({'id':1,'href':'/docs/useful-r-packages-tutorial/','title':"Useful R Packages Tutorial",'content':""});index.add({'id':2,'href':'/docs/quick-r-tutorial/r-basics/','title':"R Basics",'content':"Overview Ross Ihaka and Robert developed R at the University of Auckland in New Zealand. They started working on the tool in 1933 to help their students. However, they were then encouraged to make it open source. The language is based on another single letter programming language called S, primarily it is called S+, and it still exists.\nOne of the major reasons for the popularity of R is that R and its packages are Open Source and Free.\nDo You Know R, in its original form is a command-line language.\r\rGetting Help in R R has an extensive help system, and this is one of the best features of R programming. One can quickly access the documentation of functions and packages by using help() or ?. These functions provide access to the documentation pages for R functions, data sets, and other objects. Almost all the documents of R packages and functions contain a couple of examples showcasing how to use the function.\nhelp(mean)\r?mean\rOperators in R R supports almost all the popular binary and logical operators. I am sure you will be familiar with nearly all of them. The operators mentioned below can be used with scalars, vectors, and matrices.\nBinary/Arithmetic Operators    Operator Description     + Addition   - Subtraction   * Multiplication   / Division   ** or ^ Exponentiation   X%/%Y Integer Division   X%%Y Modulus gives remainder    Arithmetic operators in action # adding two values\r2 + 2\r# Multiplying\r23*34\r# Integer division\r1990%/%23\r# Calculating Modulus\r7%%2\rAlthough R is a remarkable statistical tool, there is one exasperating thing about R that it is a case-sensitive language. That means that view (with smaller case v)and View(with capital V) are considered as two different objects.\nLogical Operators Logical operators return TRUE if the condition is met and return FALSE if the condition is not met. They can be used with both numbers and strings.\n   Operator Description     \u0026gt; Greater than   \u0026gt;= Greater than or equal to   \u0026lt; Less than   \u0026lt;= Less than or equal to   == Equal to   != Not equal to   x y   x \u0026amp; y x and y   !x Not x    Logical Operators in action # Using Great than\r10 \u0026gt; 11\r# Using equal to\r\u0026quot;Hanna\u0026quot;==\u0026quot;hanna\u0026quot;\r# Using not x\r!10 == 11\r#Using AND operator\r(10 == 10) \u0026amp; (2 ==2)\rAssignment operator The assignment operator is used in programming languages to save or assign a value to the variable. The variable can then be used for further processing. In R, we use assignment operator (\u0026lt;-) to assign a value. We can also use equal to (=) symbol as assignment operator. However, assignment operator (\u0026lt;-) are far more prevalent in R than the equal to sign.\n# Assigning number values\rnum \u0026lt;- 23\rnum\r# Assigning string value\rstrng \u0026lt;- \u0026quot;Hanna\u0026quot;\rstrng\rStrings like most other programming languages are defined using double or single quotes.\r\rNumbers and Strings Numbers and strings are what constitute any dataset in general. So it becomes crucial we understand some of the most common tasks and functions you will be required to execute while dealing with them in general.\nWorking With Numbers Generating sequence of numbers To generate sequence of numbers one can either use semicolon(:) or can use seq() function.\n# Using (:) to generate sequence of integer numbers\r1:10\r# Using seq() function to generate sequence of numbers\rseq(10, 20, by = 0.7)\rGenerating uniformly distributed random numbers Among many functions, the functions which I like the most are runif() and sample() functions.\n# Using runif() function to generate 10 random numbers\r# By default generates number between 0 and 1\rrunif(10)\r# Generating numbers between 200 to 500\rrunif(10, min = 200, max = 500)\r# Generating four random numbers **REPLACEMENT**\rsample(10:15, 4, replace=TRUE)\r# Generating three random numbers **WITHOUT REPLACEMENT**\rsample(10:15, 4, replace=FALSE)\rsample() function is often used for creating random samples from the dataset. The sample data can then be used for training Machine Learning models or to deep dive and understand the data.\nGenerate random numbers from a normal distribution A normal distribution is a distribution that follows a bell curve. Statistically speaking, its mean, median, and mode are all the same.\n# Using rnorm() function to generate 10 random numbers\rrnorm(10)\r# Setting the desired standard deviation and mean\rrnorm(10, mean = 5, sd = 2)\rGenerating the same sequence of random numbers The set.seed() function can be used to generate the same set of random numbers. A useful function that can help you to generate reproducible results. The function takes one argument, which is an integer number. Keeping that number the same gives you identical results.\n# With set.seed()\r# Output 1\rset.seed(23)\rrnorm(10, mean = 5, sd = 2)\r# Output 2\rset.seed(23)\rrnorm(10, mean = 5, sd = 2)\r# Without set.see()\r# Output 1\rrnorm(10, mean = 5, sd = 2)\r# Output 2\rrnorm(10, mean = 5, sd = 2)\rRounding numbers to the nearest value We have a couple of ways to achieve this. One can round the values to the nearest integer, to the upper side, to the lower side, or towards zero. The following set of functions can be used to achieve either of the said tasks.\n# Generating a sequence of numbers\rnumerSeq\u0026lt;- seq(0, 1, by=.05)\r# Rounding to nearest integer - it uses that .5 rule\rround(numerSeq)\r# Rounding to one decimal point\rround(numerSeq, 1)\r# Rounding towards upper side value\rceiling(numerSeq)\r# Rounding towards lower side value\rfloor(numerSeq)\r# Rounding towards Zero\rtrunc(numerSeq)\rWorking With Strings The two tasks which are very critical from the data analysis point of view are: Combining Strings Searching \u0026amp; Replacing Strings\nCombining strings Knowing how to combine strings or a string with a number can be of great help. I often use this to represent or print my final output. Another use comes from the analysis point of view. Considering these two tasks in mind the two most widely used functions are paste()(space is a default separator) or paste0()(there is no separator) function and sprintf() function.\n# Combing two strings using paste() function\rpaste(\u0026quot;Hanna\u0026quot;, \u0026quot;Ask\u0026quot;)\r# Choosing different separator\rpaste(\u0026quot;Hanna\u0026quot;, \u0026quot;Ask\u0026quot;, sep = \u0026quot;$\u0026quot;)\r# Using paste0() function\rpaste0(\u0026quot;Hanna\u0026quot;, \u0026quot;Ask\u0026quot;)\rYou can also pass a collection of string inside the paste() function. This collection of similar elements in R is formally called a vector. More on this later.\n# Creating a vector of string\rstrgVec \u0026lt;- c(\u0026quot;Cat\u0026quot;, \u0026quot;Dog\u0026quot;, \u0026quot;Fish\u0026quot;, \u0026quot;Cow\u0026quot;)\r# Combing the values by +\rpaste(strgVec, collapse = \u0026quot;+\u0026quot;)\rsprintf() function is derived from c programming.\n# Using sprintf() function to combine two string\rsprintf(\u0026quot;My name is %s\u0026quot;, \u0026quot;Hanna\u0026quot;)\r# Combining a string and an integer\rsprintf(\u0026quot;My name is %s and I am %d years old\u0026quot;, \u0026quot;Hanna\u0026quot;, 30)\rSearching and Replacing strings We will cover three very useful functions here are those are sub(), gsub() and grep().\n# Defining a string\rstrng \u0026lt;- “You’re gonna need a bigger boat boat.”\r# Replacing boat with car\rsub(\u0026quot;boat\u0026quot;, \u0026quot;car\u0026quot;, strng)\r# Replacing boat by with car at all instances\rgsub(\u0026quot;boat\u0026quot;, \u0026quot;car\u0026quot;, strng)\r# Returns the index where the string matches\rgrep(\u0026quot;[car]\u0026quot;, letters)\rData types and structure In R, there are six data types and four data structures.\nData Types  Character - it the collection of string. Example - \u0026ldquo;Hanna\u0026rdquo;, \u0026ldquo;Dog\u0026rdquo;, \u0026ldquo;Male\u0026rdquo;. Numeric - it is a numeric value which is represented by decimal points. Example - 10.4, 12.45. Integer - its is also a number but only the integer part. Example - 109, 123, 34. Logical - the Boolean values. Example - TRUE, FALSE Factor - qualitative variable which can be either of nominal or ordinal type. If it is ordinal then it is called as ordered factor. Example Nominal - \u0026ldquo;Male\u0026rdquo; and \u0026ldquo;Female\u0026rdquo;. Example Ordinal - \u0026ldquo;Good\u0026rdquo;, \u0026ldquo;Average\u0026rdquo; and \u0026ldquo;Best\u0026rdquo;. Complex - a number which has got an imaginary part to it.  Integer values can also represent the factor variable. So always make a habit of going back and looking at the metadata for variable information.\r\rData Structure The data structures in R are defined based on the dimensionality and homogeneity of data type it can hold.\n  Vector - They are also formally known as Atomic Vectors. A Vector can hold only one type of data and is one-dimensional.\n  List - List is also one-dimensional structure; however it can store multiple data types.\n  Matrix - Matrix is two-dimensional structure and can only save one data type.\n  Data Frame - Data Frame is also a two-dimensional structure but can save multiple types of data.\n  Vector manipulation Now we will learn about some of the most basic data manipulation functions. The knowledge of these functions is an absolute must for anyone to move forward and perform any kind of data analysis task.\nDefining vectors Here is a collection of all the functions which are used to define different data types and structures in R programming.\n# Defining character vectors\rcharacterVector \u0026lt;- c(\u0026quot;Football\u0026quot;, \u0026quot;Cricket\u0026quot;, \u0026quot;Tennis\u0026quot;, \u0026quot;Badminton\u0026quot;)\r# Defining numeric vectors\rnumericVector \u0026lt;- c(12.3, 23.4, 17.9, 89.7)\r# Defining integer vectors\rintegerVector \u0026lt;- c(12L, 23L, 17L, 89L)\r# Defining logical vectors\rlogicVector \u0026lt;- c(TRUE, FALSE, TRUE, TRUE)\r# Defining factor - nominal\rfactorVector \u0026lt;- factor(characterVector)\r# Defining factor - ordinal\rorderedFactorVector \u0026lt;- factor(characterVector, ordered = TRUE)\rVerifying and checking the class of the vectors For vectors, when we check the data structure type, it returns the type of the data which it holds. For checking the class of the vector we can use either class() function or typeof() function. There are other functions, but these are the common ones.\n# Using class() function to check the object type\rclass(numericVector)\r# Using typeof function to check the object type\rtypeof(numericVector)\rIf you just wish to check the type of vector, then we can use is family functions. These functions will return TRUE if the vector belongs to a specific kind else it returns FALSE.\n# Checking if the vector is character type\ris.character(numericVector)\r# Checking if the vector is numeric type\ris.numeric(numericVector)\rAccessing the elements of a vector The elements inside a vector can be accessed using an index. Unlike other programming languages like C or Python, the indexing in R starts from 1 and not zero.\n# Extracting third elements\rcharacterVector[3]\r# Extracting multiple elements\rcharacterVector[c(1,3)]\r# Deleting element\rcharacterVector[-1]\r# Deleting multiple element\rcharacterVector[-c(1,3)]\rNote One is not allowed to pass both positive and negative index values.\r\rReplacing and adding values to a vector To replace existing values in a vector. First, call the value using square brackets [] and then simply assign a new value to it.\n# Replacing football with basketball\rcharacterVector[1] \u0026lt;- \u0026quot;Basketball\u0026quot;\rcharacterVector\r# Replacing more than one values\rnumericVector[c(1,4)] \u0026lt;- c(55, 66)\rnumericVector\rTo add new value to a vector, you can use either of the below approaches based upon your requirement.\nUsing Index The numericVector contains 4 elements. We will add a new element to this vector by using the index. However, this method only allows us to add a new element at the end of the vector.\n# Adding element at the end.\rnumericVector[5] \u0026lt;- 77\rnumericVector\rUsing c() function By using c() function, you can add new element either at the beginning or at the end of a vector.\n# Adding element at the end.\rnumericVector \u0026lt;- c(numericVector, 99)\rnumericVector\r# Adding element at the beginning\rnumericVector \u0026lt;- c(99, numericVector)\rnumericVector\rUsing append() function If you wish to add a new element at any given index in a vector, then append() function is the correct choice. The function takes three arguments.\n# Using append function to add value after 4th positon\rnumericVector \u0026lt;- append(numericVector, # vector\r99, # element to be interted\r4) # index after which to be inserted\rGetting the index of a particular element The below code can be used to get the index of an element in R.\n# Printing the index of values which are equal to 99\rwhich(numericVector == 99.0)\rOther important vector manipulation functions Below is the list of essential and useful functions for the manipulation of vectors in R.\nSorting a vector # Sorting in ascending order\rnumericVector[order(numericVector)]\r# Sorting in descending order\rnumericVector[order(numericVector, decreasing = TRUE)]\rChecking and Removing missing values # Adding NA value to a vector\rnumericVector[2] \u0026lt;- NA\r# Checking if missing value is present\ris.na(numericVector)\r# Removing NA values using ! not\rnumericVector[!is.na(numericVector)]\r# Removing NA values using na.omit() function\rna.omit(numericVector)\rSubsetting the vector and getting length of a vector # Getting elements greater than 30\rnumericVector \u0026lt;- numericVector[numericVector \u0026gt; 30]\r# Checking the total number of elements in the new vector\rlength(numericVector)\rList manipulation Defining list To define a list we use list() function. The function can be used to create simple list or named list.\n\r# Defining list\rexample1 \u0026lt;- list(c(2,3,4), c(\u0026quot;aa\u0026quot;, \u0026quot;bb\u0026quot;, \u0026quot;cc\u0026quot;, \u0026quot;dd\u0026quot;), c(TRUE, TRUE))\rexample1\r# Defining vectors\rempName \u0026lt;- c(\u0026quot;Chris\u0026quot;, \u0026quot;Robin\u0026quot;, \u0026quot;Matt\u0026quot;)\rempSalary \u0026lt;- c(2000, 4000, 6000)\rbonusGiven \u0026lt;- c(TRUE, TRUE, FALSE)\r# Defining list using vectors\rlistStruct \u0026lt;- list(empName, empSalary, bonusGiven)\rlistStruct\r# Defining Named list\rnamedListStruct \u0026lt;- list(\u0026quot;empName\u0026quot; = empName,\r\u0026quot;empSalary\u0026quot; = empSalary,\r\u0026quot;bonusGiven\u0026quot; = bonusGiven)\rnamedListStruct\rReferencing values of a list A value inside a list can be accessed using an index or by using the name(if it is a named list). Fundamentally list is nothing but a collection of vectors. That means we can apply all the data manipulations, which we have just learned in the Vector Manipulation section.\nExtracting values from a list # Extracting a value list of emp names from unnamed list\rlistStruct[[1]]\r# Extracting a value list of emp names from the named list\rnamedListStruct$empName\r# Extract Robin from the emp names\rlistStruct[[1]][2]\r# Extracting a value list of emp names from named list\rnamedListStruct$empName[2]\rReplacing values in a list # Replace salary for Robin by 8000\rlistStruct[[2]][2] \u0026lt;- 8000\rlistStruct\r# or in named list\rnamedListStruct$empSalary[2] \u0026lt;- 8000\rnamedListStruct\rUnlisting the list Unlist() function can be used to flatten out the list to one level.\nunlist(listStruct)\rChecking the class of each vector in a list lapply(listStruct, class)\rA list can consist of multiple levels, and one can also create a nested list. Also, lists can be used to bundle objects of different lengths.\r\rMatrix Manipulation Defining Matrix As it is a two-dimensional structure while defining, we need to mention the number of rows and number of columns.\n# Defining a matrix\rmatStruct \u0026lt;- matrix(integerVector,\rnrow = 2, ncol = 2,\rbyrow = TRUE)\r# Defining a matrix\rmatStruct1 \u0026lt;- matrix(integerVector,\rnrow = 2, ncol = 2,\rbyrow = FALSE)\rBasic operations related to matrix In the below code snippet we are sharing some functions which are good to know and will help you with your data science work.\n# naming columns\rcolnames(matStruct) \u0026lt;- c(\u0026quot;col1\u0026quot;, \u0026quot;col2\u0026quot;)\r# naming rows\rrownames(matStruct) \u0026lt;- c(\u0026quot;row1\u0026quot;, \u0026quot;row2\u0026quot;)\r# Getting the dimension of the matrix\rdim(matStruct)\r# Getting the count of the rows\rnrow(matStruct)\r# Getting the count of the columns\rncol(matStruct)\r# Accessing 2 column values\rmatStruct[, 2]\r# Accessing 1 row values\rmatStruct[1, ]\r# Combing two matrix by columns\rcbind(matStruct, matStruct1)\r# Combing two matrix by rows - appending\rrbind(matStruct, matStruct1)\rIn this chapter, we looked at all the basic concepts of R Programming. We learned and spent some time looking at things like different operators, data types, structures, and some must-know functions, which will enable you to manipulate these structures. We hope you got some sense of how powerful this software can be. In the next chapter, we’ll look at an extensive list of data manipulation tasks related to data frames.\n"});index.add({'id':3,'href':'/docs/quick-r-tutorial/using-conditional-statements-and-loops/','title':"Conditions \u0026 Loops",'content':"Conditions and Loops In R Conditional statements in R programming language enables the user to execute a statement based upon a particular condition or criteria. On the other hand, the loops ensure that the same task is executed again and again.\nHaving knowledge and understanding of how the two work is extremely critical for any programmer. As a data analyst or a data science practitioner, you will be using them quite often.\nif statement in R Programming If statements are used to check a condition and if the condition is met, it executes a block of code. It returns TRUE if the condition is met and returns FALSE if the condition is not met.\nif statement syntax # Syntax of if statement\rif(condition){\r# block of code to be executed\r}\rWorking example Let us look at an example - Print the summary statistics of a variable only if the variable is numeric.\n# Getting the iris data\rdata(iris)\r# Executing the if statement\rif(is.numeric(iris$Petal.Length)){\rprint(summary(iris$Petal.Length))\r}\rIn the above example, you saw that the summary got printed because the variable type was numeric. However, if the class of variable would have been different, no output would have been written. In fact, nothing would have happened, and leaving it like that is not a good idea, especially if a user is involved. You may want to inform the user that the variable entered is not a numeric one, and thus nothing is printed.\r\rif-else statement syntax # Syntax of if statement\rif(condition){\r# block of code to be executed\r} else {\r# block of code to be executed in case if returns FALSE\r}\rWorking example Let us take the above example and add an else statement that will print a statement notifying the user that the input variable is not numeric.\n# Executing the if statement\rif(is.numeric(iris$Species)){\rprint(summary(iris$Species))\r} else {\rprint(\u0026quot;Tested variable is not a numeric variable.\u0026quot;)\r}\rif-else statement syntax The nested if else statement is used when you want to test two or more conditions.\n# Syntax of nested if-else statement\rif(first condition){\r# block of code to be executed\r} else if(second condition) {\r# block of code to be executed if the second condition is met\r} else {\r# block of code to be executed if none of the conditions is met.\r}\rWorking example Let us take the above example and say we should print the summary statistics if the variable is numeric or integer and table if the variable is a factor or character type. If none of the conditions are met; print - we are sorry we do not accept this variable type.\n# Resetting the data\rdata(iris)\r# Getting the variable name\rvarName \u0026lt;- \u0026quot;Species\u0026quot;\r# Executing the if statement\rif(is.numeric(iris[, varName]) | is.integer(iris[, varName])){\rprint(summary(iris$Species))\r} else if(is.character(iris[, varName]) | is.factor(iris[, varName])) {\rprint(table(iris[ , varName]))\r} else {\rprint(\u0026quot;Variable type unknown\u0026quot;)\r}\rYou can have as many conditions in a nested if-else as you wish. However, remember that the if-else statement works from top to bottom. That means it may lead to unnecessary computation at times based upon your analysis requirement.\r\rswitch statement in R Programming If you are sure about all the output cases based upon the condition, then it is recommended to use switch function over the if-else statement.\nWorking example Print the mean if the user passes \u0026ldquo;1\u0026rdquo; and print median if the user passes \u0026ldquo;2\u0026rdquo;. We will use a switch statement to achieve this task.\n# Refreshing the mtcars dataset\rdata(mtcars)\r# printing mean\rswitch(\u0026quot;1\u0026quot;,\r\u0026quot;1\u0026quot; = mean(mtcars$mpg),\r\u0026quot;2\u0026quot; = median(mtcars$mpg))\r}\rfor loop in R Programming for loops are used to execute the same block of code over a range of values. That means as the range of values gets over, the for loop ends.\nfor loop syntax The syntax is pretty simple and straightforward. There are three components of the syntax: one, the vector in which we have the values. Second, the index identifier that will call one value at a time from the vector and final part is the block of code, which will be executed over and over.\n# For loop syntax\rfor(i in vector){\r# Block of code\r}\rWorking example Print the class of all the variable using for loop.\nvarNamesList \u0026lt;- colnames(iris)\rfor(i in varNamesList){\rprint(sprintf(\u0026quot;The class of %s is %s.\u0026quot;, i, class(iris[, i])))\r}\rTo print the value while running a for loop, you must use print() function. In the above example, I used the sprintf() function to ensure that values get printed on the console.\nWhile loop in R Programming A while loop is designed to execute when a condition is met. The execution of the code is stopped if the condition is not met.\nWorking Example Print a sequence of numbers starting from 1 till 10.\nnum \u0026lt;- 1\rwhile(num \u0026lt;= 10){\rprint(num)\rnum = num + 1\r}\rHow to break or skip a value in a loop To skip a value or break out of a loop in R, we have two control statements called next and break statement.\nWorking example Print only those names from a character vector that have less than five alphabets and skip all the names which are spelled using more than five characters. To achieve this we will be using nchar() function and if statement inside a for loop.\n# Defining a list of vector containg names\rallNames \u0026lt;- c(\u0026quot;John\u0026quot;, \u0026quot;Michell\u0026quot;, \u0026quot;Danny\u0026quot;, \u0026quot;Silver\u0026quot;, \u0026quot;Olive\u0026quot;)\rfor (nam in allNames) {\rif (nchar(nam) \u0026gt; 5){\rnext\r}\rprint(nam)\r}\rIn this chapter, we learned how to use conditional statements, loops, and control statements in R. We used some simple and some little difficult examples to showcase the use of the same. But this is just the beginning. With time you will be able to create some very complicated programs using these simple things. In the next chapter, we will look into apply family functions, and we will also learn how to define custom functions.\n"});index.add({'id':4,'href':'/docs/quick-r-tutorial/functions-and-apply-family/','title':"Its All About Functions",'content':"Functions in R By now you must have figured it out that R programming is not a traditional programming language. The language is a collection of functions that are packed together to form a package. All thanks to the open and free community, which has contributed to over 9000 packages over the years. Today one can find any function to achieve almost any statistical task in R by doing a little research. However, you may still be interested in creating your custom function in R. The custom function defined by the user is termed as User Defined Function in R. In this chapter, we will learn how to create a custom function.\nR Packages - A collection of similar functions Before we move forward and see how to define a custom function, let us see how to download an R package and start using the functions from that package. The task is fairly straightforward. One can use install.packages function to download the R package from CRAN to the local system. Once you have the package downloaded, all you need to do is load the package in your environment to have access to the functions from the package.\nTo load a package you can use either library() or require() function.\r\rThese two functions are a tad different in terms that the require function returns FALSE and gives a warning if the package does not exist. On the other hand, library function returns an error.\r\rGiven the above information, it is recommended to use require() function inside of a function in R. This way, when you call the function without loading the package, the program will return a warning message instead of throwing an error and exiting the program without completing the execution.\nInstalling and loading R Packages # Installing {devtools} package, passing arguments\rinstall.packages(\u0026quot;devtools\u0026quot;, # Package name\rdependencies = TRUE, # Download Pacakes used to build this package\rquiet = TRUE) # Control the info printed on the console\r# Loading a package\rlibrary(devtools)\r# Loading using require()\rrequire(devtools)\rInstalling R Packages from GitHub One can download an R package from the GitHub repository directly by using install_github() function. The function is available in devtools package.\n# Installing Package from github\rinstall_github(\u0026quot;tidyverse/dplyr\u0026quot;)\rHow to create a user-defined function in R A function in R consists of three parts. First is the name of the function. Second, function() keyword for defining the function. Inside this keyword, we pass our parameters. The third is the execution code, and it goes inside the curly brackets.\nFor example, Let’s create a function to add two numbers. This function thus requires two parameters.\n# Creating a function to add two numbers\raddTwoNumber \u0026lt;- function(a = 1, b = 1){\rreturn(a + b)\r}\r# Calling this function\raddTwoNumber(a = 10, b = 10)\r addTwoNumber - is the name of my function function(a = 1, b = 1) - here a and b are the arguments which this function can take. We have also provided one as a default value to both the parameters. return(a + b) - this section return the value after adding a and b.  Defining an anonymous function in R An anonymous function is a function which does not have any name and is also at times called as inline functions. Let’s see how we can create and use these functions. For example - You want to calculate the sum of each column in a data frame by ignoring the NA values in them.\n# Getting column wise sum for each variable\routput \u0026lt;- apply(mtcars, 2, function(x){ sum(x, na.rm = TRUE)})\rApply family functions In the previous example, we just saw an apply function that executes like a for loop but in a vectorized way. That makes the apply family functions faster and easy to write in most cases. Below is a list of my favorite functions from apply family.\nUsing apply function Using apply function, one can apply almost any function to either all the rows or columns. These functions can also be user-defined. In the above code, we saw how to use apply function to apply another function on all the columns. In the next example, we will apply the same function to all the rows. That should return 32 values as we have 32 rows in the mtcars dataset.\n# Getting row-wise sum for each variable\routput \u0026lt;- apply(mtcars, 1, function(x){ sum(x, na.rm = TRUE)})\rUsing lapply and sapply functions The lapply() and sapply() functions are very similar to the apply() function which we just learned. However, these functions apply the requested function only on columns. Also, these two functions are different from each other in terms of the output they produce. The lapply function generates a list output whereas sapply function generates a vector output.\nWorking example In this example, we will achieve the same task of getting sum by each column using sapply() and tapply functions. It will allow us to compare the final outputs of the functions.\n# Using lapply() function\rlapply(mtcars, FUN = function(x){ sum(x, na.rm = TRUE)})\r# Using sapply() function\rsapply(mtcars, FUN = function(x){ sum(x, na.rm = TRUE)})\rUsing tapply functions The tapply() function is useful in applying a function by a grouped variable. The function splits the data by a factor variable and returns the function output by each level.\nWorking example In this example, we will see how to get the average sepal length of flowers by the species.\n# Using tapply function to get the average\r# sepal length by flower species\rtapply(iris$Sepal.Length, iris$Species, mean)\rIn this chapter, we reviewed the concept of functions, packages, and learned how to use some of the important apply family functions. Now you’ve gathered enough knowledge about R tool and are ready to enter the exciting world of data analysis! In last chapters, we intend to create a list of useful functions for working with data objects. This will be a continuous effort and we request you to contribute to the same.\n"});index.add({'id':5,'href':'/docs/quick-r-tutorial/dataframe-manipulations/','title':"Data Frame Manipulations",'content':"Data Manipulation Tasks With Example Code As a data analyst, you will be working mostly with data frames. And thus, it becomes vital that you learn, understand, and practice data manipulation tasks. This chapter will focus on listing down some of the most common data manipulation tasks along with example code.\nBefore, we start and dig into how to accomplish tasks mentioned above. Let\u0026rsquo;s see how to access the datasets which come along with the R packages.\r\rYou can get the list of all the datasets by using data() function and to get the list of datasets belonging to a particular package use argument data(package = \u0026quot;MASS\u0026quot;) function.\nStructure of a data frame With the structure of a data frame, we mean how to check the dimension of a data frame. The total number of observations present in a data frame and things like that. This information can be extracted by using dim()and str() functions. The str() function gives much more detailed information as compared to dim() function.\n# Getting number of rows and columns - dimension\rdim(iris)\r# Getting more elaborate information\rstr(iris)\rGetting column and row names To print the column and row names, you can use the colnames() and rownames() function. There exist another function called names() that can get the names of the columns. Both functions return a character vector.\n# Printing columns names\rcolnames(iris)\r# Printing columns names\rnames(iris)\r# Getting more elaborate information\rrownames(mtcars)\rConevrting rownames to columns The function add_rownames() from dplyr can add row names as a column into the data frame. This function will add the new column at the beginning of the data frame.\nlibrary(dplyr)\r# Adding row names as a column in mtcars\rmtcars \u0026lt;- add_rownames(mtcars, \u0026quot;carNames\u0026quot;)\rThe above task can also be accomplished by using functions like rownames() and cbind() from base R package. So let us see how one can achieve the desired output using these functions.\n# Resetting the data to the original form\rdata(mtcars)\r# Extracting row names\rnames \u0026lt;- rownames(mtcars)\r#Setting the row names to NULL - deleting basically\rrownames(mtcars) \u0026lt;- NULL\r# Combining the row names back to the mtcars dataset\rmtcars \u0026lt;- cbind(mtcars,names)\rAccessing columns and rows in a data frame A row or a column of a data frame can be accessed using either the index or name. For example,\nExtract mileage data from mtcars dataset\n# Using index\rmtcars[, 1] # mileage is the first columns\r# Using column name\rmtcars[, \u0026quot;mpg\u0026quot;]\r# Using dollar notation(to call by variable name)\rmtcars$mpg\rExtract two columns - mileage and cyl from mtcars dataset\n# Using index\rmtcars[, c(1,2)] # mileage is the first columns\r# Using column name\rmtcars[, c(\u0026quot;mpg\u0026quot;, \u0026quot;cyl\u0026quot;)]\rExtract data at row level - Hornet 4 Drive from mtcars dataset\n# Using index\rmtcars[4, ] # Hornet 4 Drive is the fourth observation\r# Using index for calling multiple rows\rmtcars[c(3,4), ] # Hornet 4 Drive is the fourth observation\r# Using row name\rmtcars[\u0026quot;Hornet 4 Drive\u0026quot;,]\r# Using row nams for calling multiple observations\rmtcars[c(\u0026quot;Datsun 710\u0026quot;,\u0026quot;Hornet 4 Drive\u0026quot;),]\rRenaming and rearranging columns of a data frame One can rename the columns using colnames() function. The same task can be achieved through rename() function from dplyr package in R.\n# Renaming all the columns\rcolnames(cars) \u0026lt;- c(\u0026quot;carSpeed\u0026quot;, \u0026quot;distanceCovered\u0026quot;)\r# Renaming only 2nd column\rcolnames(cars)[2] \u0026lt;- \u0026quot;distCovered\u0026quot;\r# Using rename() function from dplyr\rrequire(dplyr)\riris = rename(iris, flowerSpecies = Species, SepalLength = Sepal.Length)\rColumns of a data frame can be rearranged by using column names or by using column index, as shown in the code snippet.\r\rdata(cars)\r# Checking current column names\rnames(cars)\r# Reordering by using column names\rcars \u0026lt;- cars[c(\u0026quot;dist\u0026quot;, \u0026quot;speed\u0026quot;)]\r# Reordering by using column index\rcars \u0026lt;- cars[c(2, 1)]\rHow to identify missing values You can look for missing values by column or by row. To check by column we can use describe() function from Hmisc R package or summary() function from stats R package. The describe() function returns a column called as missing, whereas summary() function indicates the presence of the missing values by NA count.\nlibrary(Hmisc)\r# using describe() function\rdescribe(mtcars)\r# Using summary() function\rsummary(mtcars)\rApart from these two functions you also use is.na() function along with apply() and any() function to identify if a variable contains missing value or not. If a variable contains a missing value it will return TRUE else it will return FALSE.\n# Column wise missing value check\rapply(mtcars, 2, function(x){any(is.na(x))})\r# Row wise missing value check\rapply(mtcars, 1, function(x){any(is.na(x))})\r###How to filtering missing values To filter missing values we can make use of is.na() function or we can also use a function named complete.cases(). Lets us see how to use these functions.\n# Using is.na to get complete observations\rCO2[!is.na(CO2), ]\r# Using complete.cases to get complete rows\rCO2[complete.cases(CO2), ]\rHow to impute missing values There are many ways in which one can fill the missing values. However, in this section, we will learn how to replace missing values by mean and how to use a machine learning algorithm like KNN or Random Forest to impute the missing values.\n# Filling missing values with Mean\riris$Sepal.Length[is.na(iris$Sepal.Length)] = mean(iris$Sepal.Length, na.rm=TRUE)\r# alternative way is to use ifelse\riris = transform(iris, y = ifelse(is.na(Sepal.Length), mean(Sepal.Length, na.rm=TRUE), Sepal.Length))\r# Using knn imputation to fill missing values\rlibrary(bnstruct)\rknn.impute(iris, k = 3, cat.var = 1:ncol(iris),\rto.impute = 1:nrow(iris),\rusing = 1:nrow(iris))\r# Using random forest to fill missing value\rset.seed(50)\riris \u0026lt;- rfImpute(Species ~ ., iris.na)\rSorting variables in a data frame You can sort a column in ascending or descending order. Also, one can use more than one column to sort the dataset. We will be demonstrating how to sort the data frame by using order() and arrange() functions. The arrange() function is from dplyr package in R.\ndata(mtcars)\r# Sorting mtcars by mpg(ascen) variable - order function\rmtcars[order(mtcars$mpg),]\r# Sorting mtcars by mpg(desc) variable - order function\rmtcars[order(mtcars$mpg, decreasing = TRUE),]\r# we can use (-)ve sign\rmtcars[order(-mtcars$mpg),]\r# Sorting by more than two variables\rmtcars[order(mtcars$mpg, mtcars$cyl),]\r# Using arrange function from dplyr package\rrequire(dplyr)\rarrange(mtcars, mpg) # ascending order one variable\rarrange(mtcars, mpg, cyl) # ascending order two variables\rarrange(mtcars, desc(mpg)) # descending order one variable\rRemoving duplicated values from a data frame Duplicate values are mostly considered from a row\u0026rsquo;s perspective, but one may require to identify duplicate columns. In this example, we will see how to remove duplicated rows as well as duplicated columns.\ndata(CO2)\r# Adding duplicated row\rCO2 \u0026lt;- rbind(CO2, CO2[2,])\rnrow(CO2)\r# Removing duplicated rows\rCO2[!duplicated(CO2), ]\rnrow(CO2)\r# Adding duplicate columns for demonstration\rdata(CO2)# Resting the data\rCO2 \u0026lt;- cbind(CO2, CO2[,2])\rcolnames(CO2)[6] \u0026lt;- \u0026quot;Type\u0026quot;\r# Removing duplicated columns\rCO2[, !duplicated(colnames(CO2))]\rdata(CO2) # Resting the data\rCO2 \u0026lt;- cbind(CO2, CO2[,2])\rcolnames(CO2)[6] \u0026lt;- \u0026quot;Type\u0026quot; # naming the column\r# Removing duplicated columns and keeping the last columns\rCO2[, !duplicated(colnames(CO2), fromLast = TRUE)]\rRenaming levels of a factor variable in a data frame To rename levels of factor variable can be tricky but is pretty simple. First, you need to call the levels of a factor variable by using levels() function and then assign new names to the desired levels. Remember, the order of new variable names should be the same.\n# Renaming Mississippi level to Miss\rlevels(CO2$)[2] \u0026lt;- \u0026quot;Miss\u0026quot;\r# Renaming all the levels\rlevels(CO2$) \u0026lt;- c(\u0026quot;Queb\u0026quot;, \u0026quot;Missi\u0026quot;) # follow the order\rGenerating frequency table(one-way, two-way etc) To generate a frequency table use table() or CrossTable() function from gmodels package in R. The output of a CrossTable() functions resembels the output of ctable in SAS. The output also includes Row Totals, Column Totals, Table Total and chi-sqaure contribution information.\n# Building frequency table - univariate\rtable(mtcars$cyl) # ingnors NA\rtable(mtcars$cyl, useNA = \u0026quot;ifany\u0026quot;) # gives freq of NA if present\rtable(mtcars$cyl, useNA = \u0026quot;always\u0026quot;) # always prints NA count in a table if NA is missing 0 count is considered.\r# Building frequency table - Bivariate\rtable(mtcars$cyl, mtcars$am)\r# Building frequency table - multivariate\rtable(mtcars$cyl, mtcars$am, mtcars$gear)\r# Using crosstable function to generate contigency table\rlibrary(gmodels)\rCrossTable(mtcars$cyl, mtcars$am)\rAdding and deleting columns in a data frame The addition and deletion of the new column is a part of a regular job for a data analyst. Let us see how we can add a column called time to the cars dataset by using the distance over speed formula.\n# Adding new column\rcars$time \u0026lt;- round(cars$dist/cars$speed, 1)\r# Deleting a column\rcars$time \u0026lt;- NULL\rMerging, combining and appending data frames You can merge function to combine the two dataframe in R. This function is available in the base package. Using merge function, one can get the inner, outer, left, right, and cross joins.\n# Inner Join\rmerge(x = data1, y = data2, by = \u0026quot;common Variable\u0026quot;)\r# Outer join\rmerge(x = data1, y = data2, by = \u0026quot;common Variable\u0026quot;, all = TRUE)\r# Left outer join\rmerge(x = data1, y = data2, by = \u0026quot;common Variable\u0026quot;, all.x = TRUE)\r# Right outer\rmerge(x = data1, y = data2, by = \u0026quot;common Variable\u0026quot;, all.y = TRUE)\r# Cross join\rmerge(x = data1, y = data2, by = NULL)\rSummarizing data Many different packages in R provide a different set of functions with divergent statistics. Here is the list of functions that you can consume directly.\n summary() function - available in basic R describe() function - there are two different function by same name. One is available in psych package and the other is available in Hmisc package fivenum() function - available in base R - stats package  Summarizing data by grouped variable It is always a good idea to look at the data over different slices. For example, you may want to look at the average mileage of a car by cylinder variable. Below is a list of functions that we will be using to achieve the task mentioned above.\n Using aggregate() function Using tapply() function Using group_by() and summary() function from dplyr package  You can use these functions to aggregate data by multiple variables as well.\r\r# Using aggregate function\raggregate(x = mtcars$mpg, by = list(mtcars$cyl), FUN = \u0026quot;mean\u0026quot;)\r# Using aggregate() to group by more than one variable\raggregate(x = mtcars$mpg, by = list(mtcars$cyl, mtcars$gear), FUN = \u0026quot;mean\u0026quot;)\r# Using tapply function\rtapply(mtcars$mpg, mtcars$cyl, mean)\r# Using functions from dplyr package\r# Loading library\rlibrary(dplyr)\rmtcars %\u0026gt;%\rdplyr::group_by(cyl) %\u0026gt;%\rdplyr::summarize(mean_mileage = mean(mpg))\r# Using multiple variables to group\rmtcars %\u0026gt;%\rdplyr::group_by(cyl, gear) %\u0026gt;%\rdplyr::summarize(mean_mileage = mean(mpg))\rTransforming data between long and wide format While working on data in R, you will realize that a lot of functions expect you to pass data in the long-form. These tasks can be achieved using functions from tidyr package and rehape2 package in R.\nWe will first create two data frames, one with a wide format and one with the long format containing the same information.\nCreating data frame with wide format\nwide \u0026lt;- read.table(header=TRUE, text='\rsubject sex control cond1 cond2\r1 M 7.9 12.3 10.7\r2 F 6.3 10.6 11.1\r3 F 9.5 13.1 13.8\r4 M 11.5 13.4 12.9 ')\r# Coneverting subject variable to factor variable\rwide$subject \u0026lt;- factor(wide$subject)\rCreating data frame with long format\nlong \u0026lt;- read.table(header=TRUE, text='\rsubject sex condition measurement\r1 M control 7.9\r1 M cond1 12.3\r1 M cond2 10.7\r2 F control 6.3\r2 F cond1 10.6\r2 F cond2 11.1\r3 F control 9.5\r3 F cond1 13.1\r3 F cond2 13.8\r4 M control 11.5\r4 M cond1 13.4\r4 M cond2 12.9 ')\r# Coneverting subject variable to factor variable\rlong$subject \u0026lt;- factor(long$subject)\rNote {tidyr} package is just a new interface for the reshape2 package.\r\rUsing gather() function from tidyr package to convert the data from wide to long format. # loading package\rlibrary(tidyr)\rwide_to_long \u0026lt;- gather(wide, condition, measurement, control:cond2, factor_key=TRUE)\rwide_to_long\rUsing spread() function from tidyr package to convert the data from long to wide format. long_to_wide \u0026lt;- spread(long, condition, measurement)\rlong_to_wide\rFunctions which can be used from reshape2 package in R are listed below:\n  melt() function - used for converting wide formate to long format\n  dcast() function - used for converting long formate to wide format\n  Subsetting or filtering a data frame Although the subset of the data (based upon a condition) can be done in many different ways in R. In this chapter, we will be exploring three different approaches or say functions. For example, say you want to take a subset of CO2 data by the Treatment variable. Say you wish to create a new data frame that has all the observations belonging to a nonchilled treatment category.\n# Using square brackets\rsub1 \u0026lt;- CO2[CO2$Treatment == \u0026quot;nonchilled\u0026quot;, ]\r# Using subset function\rsub2 \u0026lt;- subset(CO2, CO2$Treatment == \u0026quot;nonchilled\u0026quot;)\r# Using filter function from dplyr package\rlibrary(dplyr)\rsub3 \u0026lt;- filter(CO2, Treatment == \u0026quot;nonchilled\u0026quot;)\rYou can use logical operators to use more than one condition spread across multiple variables. For example, get the subset of data where Treatment is nonchilled, and Type is Quebec.\n# Using square brackets\rsub1 \u0026lt;- CO2[CO2$Treatment == \u0026quot;nonchilled\u0026quot; \u0026amp; CO2$Type == \u0026quot;Quebec\u0026quot;, ]\r# Using subset function\rsub2 \u0026lt;- subset(CO2, CO2$Treatment == \u0026quot;nonchilled\u0026quot; \u0026amp; CO2$Type == \u0026quot;Quebec\u0026quot; )\r# Using filter function from dplyr package\rlibrary(dplyr)\rsub3 \u0026lt;- filter(CO2, Treatment == \u0026quot;nonchilled\u0026quot;, CO2$Type == \u0026quot;Quebec\u0026quot;)\rInspecting top and bottom rows of a data frame You can use head() and tail() functions to inspect the top and bottom n observations. By default both these function print top 6 and bottom 6 observations. However, you can fetch data for more or less observations.\nhead(mtcars) # default top 6 observations\rhead(mtcars, 10) # prints top 10 observations\rtail(mtcars) # default bottom 6 observations\rtail(mtcars, 10) # prints bottom 10 observations\r"});index.add({'id':6,'href':'/posts/creating-a-new-theme/','title':"Creating a New Theme",'content':"Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r$\rSome Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\r$ cd ~/Sites/zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .\rdrwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rTake a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rSee that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public\rtotal 16\r-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml\r-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml\r$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rConnect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml\rsitemap.xml\rThat\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\rThat second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes\r$ find themes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml\r$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\rauthor = \u0026quot;michael d henderson\u0026quot;\rdescription = \u0026quot;a minimal working template\u0026quot;\rlicense = \u0026quot;MIT\u0026quot;\rname = \u0026quot;zafta\u0026quot;\rsource_repo = \u0026quot;\u0026quot;\rtags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;]\r:wq\r## also edit themes/zafta/LICENSE.md and change\r## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;\rNote that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r$\rUpdate the Configuration File to Use the Theme Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\rtheme = \u0026quot;zafta\u0026quot;\rbaseurl = \u0026quot;\u0026quot;\rlanguageCode = \u0026quot;en-us\u0026quot;\rtitle = \u0026quot;zafta - totally refreshing\u0026quot;\rMetaDataFormat = \u0026quot;toml\u0026quot;\r:wq\r$\rGenerate the Site Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$\rDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public\rtotal 16\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html\r-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js\r-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml\r$\rNotice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rIf it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html\r$ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\rdrwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes\rdrwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js\r$ The Theme Development Cycle When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\r##\r$ rm -rf public\r##\r## run hugo in watch mode\r##\r$ hugo server --watch --verbose\rHere\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public\r$ hugo server --watch --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rWatching for changes in /Users/quoha/Sites/zafta/content\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rINFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB]\rChange detected, rebuilding site\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 1 ms\rUpdate the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq\r$\rBuild the web site and then verify the results.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;\rLive Reload Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rWhen you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\rERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{}\r$ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\r+++\rDescription = \u0026quot;\u0026quot;\rTags = []\rCategories = []\r+++\r:wq\r$ find themes/zafta/archetypes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md\r$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\r/Users/quoha/Sites/zafta/content/post/first.md created\r$ hugo --verbose new post/second.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/second.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\r/Users/quoha/Sites/zafta/content/post/second.md created\r$ ls -l content/post\rtotal 16\r-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md\r-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md\r$ cat content/post/first.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot;\rtitle = \u0026quot;first\u0026quot;\r+++\rmy first post\r$ cat content/post/second.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot;\rtitle = \u0026quot;second\u0026quot;\r+++\rmy second post\r$ Build the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$\rThe output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html\r$\rThe new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026quot;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html\rWe could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html\r$ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rNotice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCreate a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\rAs with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++\rtitle = \u0026quot;about\u0026quot;\rdescription = \u0026quot;about this site\u0026quot;\rdate = \u0026quot;2014-09-27\u0026quot;\rslug = \u0026quot;about time\u0026quot;\r+++\r## about us\ri'm speechless\r:wq\rGenerate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html\rNotice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://'\r+ (location.host || 'localhost').split(':')[0]\r+ ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/'\r+ 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rNotice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if eq .Type \u0026quot;page\u0026quot; }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html\rKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\r[permalinks]\rpage = \u0026quot;/:title/\u0026quot;\rabout = \u0026quot;/:filename/\u0026quot;\rGenerate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r:wq\r$ vi themes/zafta/layouts/partials/footer.html\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rUpdate the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}\rversus\n{{ partial \u0026quot;header.html\u0026quot; . }}\rBoth pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\rPosts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNow we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"});index.add({'id':7,'href':'/posts/migrate-from-jekyll/','title':"Migrate to Hugo from Jekyll",'content':"Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/\r▾ images/\rlogo.png\r should become\n▾ \u0026lt;root\u0026gt;/\r▾ static/\r▾ images/\rlogo.png\r Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\r   Or, change the Hugo configuration to use _site instead of public.\n {\r..\r\u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;,\r..\r}\r   Convert Jekyll templates to Hugo templates That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll\rclass ImageTag \u0026lt; Liquid::Tag\r@url = nil\r@caption = nil\r@class = nil\r@link = nil\r// Patterns\rIMAGE_URL_WITH_CLASS_AND_CAPTION =\rIMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\rIMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i\rIMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\rIMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\rdef initialize(tag_name, markup, tokens)\rsuper\rif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\r@class = $1\r@url = $3\r@caption = $7\r@link = $9\relsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\r@class = $1\r@url = $3\r@caption = $7\relsif markup =~ IMAGE_URL_WITH_CAPTION\r@url = $1\r@caption = $5\relsif markup =~ IMAGE_URL_WITH_CLASS\r@class = $1\r@url = $3\relsif markup =~ IMAGE_URL\r@url = $1\rend\rend\rdef render(context)\rif @class\rsource = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot;\relse\rsource = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot;\rend\rif @link\rsource += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot;\rif @link\rsource += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption\rsource += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot;\rsource\rend\rend\rend\rLiquid::Template.register_tag('image', Jekyll::ImageTag)\r is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt;\r\u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt;\r{{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }}\r\u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt;\r{{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }}\r{{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}}\r\u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }}\r{{ .Get \u0026quot;title\u0026quot; }}{{ end }}\r{{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt;\r{{ .Get \u0026quot;caption\u0026quot; }}\r{{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }}\r{{ .Get \u0026quot;attr\u0026quot; }}\r{{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }}\r\u0026lt;/p\u0026gt; {{ end }}\r\u0026lt;/figcaption\u0026gt;\r{{ end }}\r\u0026lt;/figure\u0026gt;\r\u0026lt;!-- image --\u0026gt;\r Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\r to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}\r As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff \rHey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"});index.add({'id':8,'href':'/docs/','title':"Docs",'content':""});index.add({'id':9,'href':'/docs/useful-r-packages-tutorial/Quick-ggplot2-Tutorial/','title':"Quick ggplot2 Tutorial",'content':"Overview The ggplot2 package in R provides a reliable system for describing and building graphs. The package is capable of creating elegant and aesthetically pleasing graphics. The framework of ggplot2 is quite different (in comparison to graphics package) and is based on the grammar of graphics(introduced initially by Leland Wilkinson). At first, you may not find it intuitive, but don\u0026rsquo;t worry, we are here to help. Together, we will master it to the core.\nBasic plotting framework for ggplot ggplot(data = dataset name) +\r\u0026lt;GEOM_FUNCTION\u0026gt;(mapping = aes(variable name))\rMapping the aesthetics(using aes) The aesthetic represents the object which you wish to plot in your graph. In other words, aesthetics represent different ways in which you can plot your data points. To showcase the data points, you can change things like size, shape, or color of the points. Thus by using aesthetics (represented by aes()) you can convey the information which is hidden in your dataset.\nFor example, you can map color to cylinder variable to reveal the relationship between mileage and weight. So let us take our framework and add aesthetics to it. Here we have three variables, and that means we have to pass three arguments to the aes() function.\n# Loading the library\rlibrary(ggplot2)\r# loading data and converting cyl variable to factor\rdata(mtcars)\rmtcars$cyl \u0026lt;- as.factor(mtcars$cyl)\r# Adding aesthetics\rggplot(data = mtcars) +\rgeom_point(mapping = aes(x = mpg, y = wt))\r![An example of aesthetic](/images/ggplot/aes.jpeg \"An example of asthetics\")\rMapping Geometric shapes(using geom) The geometric shapes in ggplot are visual objects which you can use to describe your data. For example, one can plot histogram or boxplot to describe the distribution of a variable.\nBelow mentioned two plots provide the same information but through different visual objects. These objects are defined in ggplot using geom. That means you can use geom to define your plot. For example, the histogram uses histogram geom, barplot uses bar geom, line plot uses line geom, and so on. There is one exception. We use point geom to plot the scatter plots.\nLet\u0026rsquo;s see how we can draw the charts, which we mentioned in the above example using geoms for the total sleep hours of animals.\nEvery geom function requires you to map an aesthetic to it. However, not every aesthetic requires a geom. For example, one can set the shape of a point, but you cannot set the shape of a line.\r\rBuilding histogram # Building a histogram\rggplot(data = msleep) +\rgeom_histogram(mapping = aes(x = sleep_total, col = \u0026quot;orange\u0026quot;))\r![Histogram Using geom](/images/ggplot/geom1.jpeg \"An example of histogram geom\")\rBuilding boxplot # Building a histogram\rggplot(data = msleep) +\rgeom_boxplot(mapping = aes(y = sleep_total))\r![Boxplot Using geom](/images/ggplot/geom2.jpeg \"An example of boxplot using geom\")\rUsing Facets in ggplot2 Facet is a way in which you can add additional categorical variables to your plot. The facet helps in building the chart by dividing the data into two or more groups. The data from these groups are used for plotting the data.\nNow there are two ways in which you can use facets:\nA. If you want to split the data by only one variable, then use facet_wrap() function. In the following syntax, you will notice tilder(~). By default, this is the first argument. After this, you should mention the variable name by which you want to do the split.\nLet\u0026rsquo;s check the distribution of total sleep by kind of animal.\n# Working example of facet_wrap\rggplot(data = msleep) +\rgeom_histogram(mapping = aes(x = sleep_total)) +\rfacet_wrap(~ vore)\rB. If you want to split the data by a combination of two variables, then you can use facet_grid(). Here the two variables should be separated by the tilder(~).\nBuilding the scatter plot between mpg and disp variable by cyl and am type.\n# loading data\rdata(mtcars)\r# Converting cylinder(cyl) and automatic(am) variable to factor variables.\rmtcars$cyl \u0026lt;- as.factor(mtcars$cyl)\rmtcars$am \u0026lt;- as.factor(mtcars$am)\r# Working example of facet_grid\rggplot(data = mtcars) +\rgeom_point(mapping = aes(x = mpg, y = disp)) +\rfacet_grid(cyl ~ am)\r![facet_grid from ggplot2](/images/ggplot/facet_grid.jpeg \"An example of using facet_grid function from ggplot2\")\rMapping colors to variables in ggplot2 Colors can play a game-changer role in any data visualization, and thus it becomes important for us to learn about it. The default color in ggplot is on the greyscale. But if you want, you can change the color.\nIn ggplot, there are a couple of ways in which you can use color.\nA. You can assign the colors to the objects, lines, and points. To color the objects, you can use fill() argument. To set colors to the lines and points, you can use the color argument. Below is a quick example of both cases.\nUsing color argument # Making the points blue color in the scatter plot\rggplot(data = mtcars) +\rgeom_point(mapping = aes(x = mpg, y = wt), color = \u0026quot;blue\u0026quot;)\r![Assigning color to the points](/images/ggplot/color1.jpeg \"An example of using color argument to assign colors to points in ggplot2\")\rUsing fill argument # Making the bars of histogram blue\rggplot(data = iris) +\rgeom_histogram(mapping = aes(x = Sepal.Width), fill = \u0026quot;blue\u0026quot;)\r![Assigning color to objects like bars](/static/images/ggplot/fill.jpeg \"An example of using color argument to assign colors to the objects in ggplot2\")\rB. We can use color to map the values of the third variable, which we have already learned in the very first example under mapping aesthetics.\nBy default the ggplot2 uses scale_fill_hue() and scale_colour_hue() for color selection. However you can choose to change the luminance of these colors. Also there are other color scales available in R from RColorBrew package.\r\rExample 1 - Showcasing Default RColorBrew setup ggplot(data = mtcars) +\rgeom_boxplot(mapping = aes(x = cyl, y = mpg, fill=cyl)) +\rscale_fill_brewer()\r![Example 1 RColorBrew Default](/images/ggplot/RBrewColor1.jpeg \"An example of using default color palette from RBrewColor Package with ggplot2 \")\rExample 2 - Showcasing Set1 pallette colors ggplot(data = mtcars) +\rgeom_boxplot(mapping = aes(x = cyl, y = mpg, fill=cyl)) +\rscale_fill_brewer(palette=\u0026quot;Set1\u0026quot;)\r![Example 2 RColorBrew Set1](/images/ggplot/RBrewColor2.jpeg \"An example of using color pallette set1 from RBrewColor Package with ggplot2 \")\rExample 3 - Showcasing Spectral pallette colors ggplot(data = mtcars) +\rgeom_boxplot(mapping = aes(x = cyl, y = mpg, fill=cyl)) +\rscale_fill_brewer(palette=\u0026quot;Spectral\u0026quot;)\r![Example 3 RColorBrew Spectral](/images/ggplot/RBrewColor3.jpeg \"An example of using color pallette Spectral from RBrewColor Package with ggplot2 \")\rFor Your reference sharing the RBrewColor Pallet chart.\r\r![RColorBrew](/images/ggplot/RBrew.png \"RBrewColor pallets chart \")\rUnderstanding the Coordinate System of ggplot2 The coordinates system of ggplot is a little complicated. But don\u0026rsquo;t worry, we will not dig too much. As of now, we will provide you with some examples of coordinate systems. If you pay attention to these, I think most of the job is done, and you are on your way to creating awesome charts using ggplot2. With time, I am sure you will be able to take deeper plunges into ggplot coordinate system. To start with, I have shortlisted some five functions as given below:\n1. coord_cartesian() - This is the default coordinate system in ggplot2. According to this system the X and Y positions of each point act independently to determine its location on the graph.\n2. coord_flip() - This is helpful in cases when you want to build horizontal graphs. This function switches the X and Y-axis. For example, you can use coord_flip to draw horizontal boxplots.\nggplot(data = mtcars) +\rgeom_boxplot(mapping = aes(x = cyl, y = mpg, fill=cyl)) +\rscale_fill_brewer(palette=\u0026quot;Set1\u0026quot;) +\rcoord_flip()\r![Coordinate system fliping the side](/images/ggplot/coord_flip.jpeg \"A working example of coord_flip function in ggplot2\")\r3. coord_polar() - This creates a nice combination charts of bar and coxcomb or pie graphs by using polar coordinates.\n# Loading girbExtra Library\rlibrary(gridExtra)\r# Generating a barplot\rbar \u0026lt;- ggplot(data = mtcars) +\rgeom_bar(\rmapping = aes(x = cyl, fill = cyl),\rwidth = 1\r)\r# Saving the two plots\rplot1 \u0026lt;- bar + coord_flip()\rplot2 \u0026lt;- bar + coord_polar()\r# Plotting the graphs by cloumn\rgrid.arrange(plot1, plot2, ncol = 2)\rIn the above code, we have used a gridExtra package. I love this package it makes plotting multiple charts on the same canvas very easy.\r\r![Coordinate system for building polar graphs ](/images/ggplot/polar.jpeg \"A working example of coord_polar function in ggplot2\")\r4. coord_map() - This functions creates a 2D map of the desired earth location. We use coor_polygon along with coord_map to a map with maintained aspect ratio. If you do not understand what this means then just run the code once without the coord_map part.\n# An example showcasing the map of USA\ritaly \u0026lt;- map_data(\u0026quot;italy\u0026quot;)\rggplot(italy, aes(long, lat, group = group)) +\rgeom_polygon(fill = \u0026quot;lightblue\u0026quot;, colour = \u0026quot;black\u0026quot;) +\rcoord_map()\r![Coordinate system for plotting map](/images/ggplot/coord_map.jpeg \"A working example of coord_map function in ggplot2\")\r5. coord_fixed() - This coordinate system ensures that the aspect ratio of axes is kept inside the specified range. Check out the below examples:\n# Building a scatter plot\rplot \u0026lt;- ggplot(mtcars, aes(mpg, wt)) + geom_point()\r# Setting the ratio to 1\rratio1 \u0026lt;- plot + coord_fixed(ratio = 1)\r# Setting ratio to 10\rratio10 \u0026lt;- plot + coord_fixed(ratio = 3)\r# plotting then in grid\rgrid.arrange(ratio1, ratio10, ncol = 2)\r![Adjusting the aspect ratio using coord_fixed](/images/ggplot/coord_fixed.jpeg \"A working example of coord_fixed function in ggplot2\")\rSupport for Statistical Transformation in ggplot Among many useful features of ggplot2, the one which may become dear to you is the support for statistical transformations. These functions save a lot of time as you don\u0026rsquo;t have to prepare the data for it, and the statistical calculations can be done on the go. Again there are multiple statistical functions, and we encourage you to explore them. However, below I have listed some of the most widely used statistical functions.\n1. stat_count - Creates a bar plot showcasing the frequency count of each level of categorical variable.\n# Plotting the bar chart of cylinder counts\rggplot(data = mtcars) +\rstat_count(mapping = aes(x = cyl))\r![Stat_count function](/images/ggplot/stat_count.jpeg \"A working example of Stat_count function in ggplot2\")\r2. stat_density() - Creates a kernel density plot. Kernel density estimate is a smoothed version of histogram. A very useful alternative for histogram to plot the histogram.\n# Plotting the bar chart of cylinder counts\rggplot(data = iris) +\rstat_density(mapping = aes(x = Petal.Length))\r![Creating density plot in ggplot2](/images/ggplot/stat_density.jpeg \"A working example of stat_density function in ggplot2\")\r3. stat_summary() - The function summarises the Y Variable for each unique values of X Variable.\n# Plotting the bar chart of cylinder counts\rggplot(data = iris) +\rstat_summary(mapping = aes(x = Species, y = Petal.Length),\rfun.ymin = min,\rfun.ymax = max,\rfun.y = mean)\r![Plotting summary statistics in ggplot2](/images/ggplot/stat_summary.jpeg \"A working example of stat_summary function in ggplot2\")\r4. stat_smooth() - Adds a smooth line to a scatter plot.\n# Adding smooth line to the scatter plot\rggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth()\r![Adding Smooth line to a scatter plot in ggplot2](/images/ggplot/stat_smooth.jpeg \"A working example of geom_smooth function in ggplot2\")\rThemes Themes Themes You must have noticed that the default theme for ggplot2 is pretty much greyish in color. If you are not a great fan of grey color, then don\u0026rsquo;t worry. Ggplot2 has a couple of themes for you to choose from.\nlibrary(gridExtra)\rp1 \u0026lt;- ggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth() +\rggtitle(\u0026quot;theme_bw\u0026quot;) +\rtheme_bw()\rp2 \u0026lt;- ggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth() +\rggtitle(\u0026quot;theme_linedraw\u0026quot;) +\rtheme_linedraw()\rp3 \u0026lt;- ggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth() +\rggtitle(\u0026quot;theme_gray\u0026quot;) +\rtheme_gray()\rp4 \u0026lt;- ggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth() +\rggtitle(\u0026quot;theme_dark\u0026quot;) +\rtheme_dark()\rp5 \u0026lt;- ggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth() +\rggtitle(\u0026quot;theme_minimal\u0026quot;) +\rtheme_minimal()\rp6 \u0026lt;- ggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth() +\rggtitle(\u0026quot;theme_void\u0026quot;) +\rtheme_void()\rgrid.arrange(p1,p2,p3,p4,p5,p6, ncol = 3, nrow = 2)\r![ggplot themes examples](/images/ggplot/themes.jpeg \"Changing from default theme to other in ggplot2\")\r"});index.add({'id':10,'href':'/docs/useful-r-packages-tutorial/R-Tutorial-datatable-With-Examples/','title':"R data.table Tutorial With Examples",'content':" If you are looking for fast execution of your r programming code on large datasets, then you must read through this tutorial. Data manipulation tasks such as aggregations, add/remove/update of columns, joins, reading large files, etc., are all very important for any data science-related project. Keeping all these operations into mind, Matt Dowle and Arun Shrinivasan created a package called data.table.\n Overview data.table package is an extension of data.frame package in R. It is one of the first choices for data scientists while they work on large datasets. Some of the notable features which makes the data.table a package so popular and easy to learn are:-\n Irrespective of what set of operations you like to perform the data.table offers a concise and consistent syntax. It automatically provides fast primary and secondary indexing of rows. The package is capable of automatically optimizing the internal operations, leading to fast and memory-efficient code. Especially, tasks like join and group by.  So, if you are looking to reduce the execution and programming time of your r code, then this package named data.table is for you.\nReading large datasets Generally, the performance of R programming is not up to the mark when it comes to working with large datasets as everything is loaded into the RAM. As part of the solution, the data.table package was designed. Lets us see how you can load large datasets using a fread() function from this package.\nBelow is a code using which we will upload a file containing 22,489,348 rows and 11 columns. The dataset we are using here is UK Housing prices paid. It is an extensive collection of records of all the individual transactions in England and Wales since 1995.\nThe data can be downloaded from HERE\n# Reading a large file using fread() function ukHousing \u0026lt;- fread(\u0026#34;price_paid_records.csv\u0026#34;) When you read a file using fread() function from data.table package the function loads it as a data table object. We will talk about object type in coming sessions. For now its important to note that if an object is not in a datatable format then you must convert it in order to take advantage of data.table package.\n Apart from reading the csv and text files fread() can also accepts http and https URLs as input. Unlike read.csv(), the columns of character data types are not converted to factors by default while reading the data file. data.table never uses row names. To visually separate the row numbers from the first columns, row numbers are printed with a colon(:).  Below is the comparison of time taken by at least three different functions in R:\n# Reading a large file using fread() function system.time(fread(\u0026#34;price_paid_records.csv\u0026#34;)) # Time difference of 2.711095 mins # reading a large file using read.csv() function system.time(read.csv(\u0026#34;price_paid_records.csv\u0026#34;)) #Time difference of 22.23424 mins \u0026gt; system.time(fread(\u0026#34;price_paid_records.csv\u0026#34;)) user system elapsed 51.04 3.61 40.63 \u0026gt; system.time(read.csv(\u0026#34;price_paid_records.csv\u0026#34;)) user system elapsed 1053.73 9.36 1073.19 Querying A Data Table Mostly when we use DT(short form for data table object), we refer to it as \u0026ldquo;querying DT\u0026rdquo;. DT is designed to do a lot more than just subjecting the data frames by row and columns. To understand the querying bit, we need to look and understand the general form of data.table syntax. The syntax is given below:\nDT[i, j, by] The above syntax can be compared to an SQL query. Here i inside the square [] brackets is an equivalent for WHERE or ORDER BY. Similarly, j represents SELECT or UPDATE, and finally, by represents the GROUP BY from the SQL. Individuals who are familiar with SQL will now understand why it is referred to as \u0026ldquo;querying DT\u0026rdquo;. The above statement can also be read as subset/reorder rows using i, then calculate j, grouped by.\nYou can use as.data.table() or simply data.table() and setDT() functions to convert any regular R data frame to a data table.\n# Using as.data.table() function dataTableIris = as.data.table(iris) # Printing top 6 rows head(dataTableIris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1: 5.1 3.5 1.4 0.2 setosa 2: 4.9 3.0 1.4 0.2 setosa 3: 4.7 3.2 1.3 0.2 setosa 4: 4.6 3.1 1.5 0.2 setosa 5: 5.0 3.6 1.4 0.2 setosa 6: 5.4 3.9 1.7 0.4 setosa Notice that a data.table prints the row numbers with a colon. This is done to visually separate row numbers from the first column. By using any of the above two functions, one can easily convert existing data.frame object to a data.table object.\nData manipulation - Common Tasks In data.table columns are referred to as if they are variable, much like SQL. This means that when we pass column names for extracting the information from a data.table object, we need not add data table names as prefix(e.g. matcars$ ). Nevertheless, using mtcars$mpg and mtcars$cyl would work just fine. Below we have provided the list of some of the everyday tasks related to data manipulation.\nGet first 10 rows of Uk Housing data # Getting the top 10 rows\rukHousing[1:10]\rWe passed row indices in the i, and as there are no conditions, the code returns the top 10 rows from the row indices. You can also use a head() to get the top 10 rows.\nSorting data in data.table 1.Sorting data by single variable - For example, sorting house price in descending order - This task can be achieved using multiple functions. We can use either order() from {base} package or setorder() function from {data.table} package to achieve this task.\n# Sorting data by using order() sort1 \u0026lt;- ukHousing[order(-Price)] # (-)ve sign is used to get data in descending order head(sort1) # Sorting data by using setorder() sort2 \u0026lt;- setorder(ukHousing, -Price) # For Acsending order remove (-)ve sign head(sort2) 2.Sorting data by multiple variables - For example, sort house price data by duration and price. To add various variables, just pass column names separated by comma(,) in both the functions.\n# Sorting data by using order() sort1 \u0026lt;- ukHousing[order(Duration, -Price, )] head(sort1) # Sorting data by using setorder() sort1 \u0026lt;- setorder(ukHousing, Duration, -Price) Subsetting data by column(s) in data.table using j As mentioned earlier, we can directly use column(s) names for subsetting in data.table. Also, if you want all the rows, then you can skip i as a section.\n1.Select single column - When we select a single column, the output returned is a vector. In case you wish to keep the structure as data.table, you need to wrap the variable name within list() function. If you find list() to boring you can instead use .(), it is an alias list() in data.table package. Most people prefer using .() instead of list() and going forward we will be continue to use .(), hereafter.\n# Subsetting data.table by selecting one column singleColumn \u0026lt;- ukHousing[ , County] head(singleColumn) # Output [1] \u0026#34;GREATER MANCHESTER\u0026#34; \u0026#34;THURROCK\u0026#34; \u0026#34;SOMERSET\u0026#34; [4] \u0026#34;BEDFORDSHIRE\u0026#34; \u0026#34;WEST YORKSHIRE\u0026#34; \u0026#34;WILTSHIRE\u0026#34; # Subsetting data.table by selecting one column keeping structure as data.table singleColumn \u0026lt;- ukHousing[ , list(County)] head(singleColumn) # Output County 1: GREATER MANCHESTER 2: THURROCK 3: SOMERSET 4: BEDFORDSHIRE 5: WEST YORKSHIRE 6: WILTSHIRE 2.Select multiple columns - This task is easy, and all we need to do is pass the column names separated by comma(,) inside the .().\nYou must pass the column names inside list alias to avoid the second column going into by section.\n# Subsetting data.table by selecting one column multiColumn \u0026lt;- ukHousing[ , .(County, Price)] head(multiColumn) # Output County Price 1: GREATER MANCHESTER 25000 2: THURROCK 42500 3: SOMERSET 45000 4: BEDFORDSHIRE 43150 5: WEST YORKSHIRE 18899 --- 22489344: WEST YORKSHIRE 175000 22489345: WEST YORKSHIRE 586945 22489346: WEST YORKSHIRE 274000 22489347: WEST YORKSHIRE 36000 22489348: WEST YORKSHIRE 145000 3.Creating new columns using expressions - You can use := operator to create new variables by applying operations on rows. In the below example, we are creating a new variable c, which is a sum of a and b variable. This is also called as Assignment by reference.\ndf \u0026lt;- data.table(a = c(1,2,3), b = c(4,5,6)) df[, c := a + b] # Output a b c 1: 1 4 5 2: 2 5 7 3: 3 6 9 Rename column in data.table As column names n data.table is passed inside list, we can rename columns as we would do while creating list. In below renaming country and price columns to A_Country and A_Price.\n# Renaming Columns in data.table renameColumn \u0026lt;- ukHousing[ , .(A_Country = County, A_Price = Price)] colnames(renameColumn) # Output [1] \u0026#34;A_Country\u0026#34; \u0026#34;A_Price\u0026#34; Using expressions with columns in data.table The in j in data.table can handle much more than just selecting columns, and it can also be used for computing on columns, also referred to as using expressions. Let\u0026rsquo;s say; you want to combine country and district variables separated by \u0026ldquo;_\u0026quot;.\n# concatinating two Columns in data.table expressionExample1 \u0026lt;- ukHousing[ , .(paste(County, District, sep = \u0026#34;_\u0026#34;))] head(expressionExample1) # Output V1 1: GREATER MANCHESTER_OLDHAM 2: THURROCK_THURROCK 3: SOMERSET_SEDGEMOOR 4: BEDFORDSHIRE_NORTH BEDFORDSHIRE 5: WEST YORKSHIRE_LEEDS 6: WILTSHIRE_SALISBURY Subsetting data using i and applying expressions using j While using data.table you can actually subject the data using i IE identify rows on which you want to perform your further data analysis. This could also be phrased as subset in i and do in j.\n1.Calculate and compare the average price of houses in OLDHAM District\nIn the below code, we first subset the data and get row where District is \u0026ldquo;OLDHAM\u0026rdquo;. We then take these rows and apply the mean function in the j part of the syntax.\n# Avg house prices in OLDHAM ans \u0026lt;- ukHousing[ District == \u0026#34;OLDHAM\u0026#34;, .(Avg_Price = mean(Price))] ans # Output Avg_Price 1: 91258.15 2.How many houses do we have in OLDHAM\nHere we need to count the total number of rows in the subject. To achieve this, we can use two different functions. One we can use length() and another we can use is .N() function. Please note, length() will require us to pass the argument. This could be any variable name. However, .N does not require a function to be passed.\n# Total number of rows where Dristrict is OLDHAM ans \u0026lt;- ukHousing[ District == \u0026#34;OLDHAM\u0026#34;, length(District)] ans # Output [1] 76576 # Total number of rows where Dristrict is OLDHAM ans \u0026lt;- ukHousing[ District == \u0026#34;OLDHAM\u0026#34;, .N] ans # Output [1] 76576 The special symbol .N is a built-in variable that saves the total number of observations in the current group. In the next section, we will see how we can combine .N with the by. But before we move ahead, let us see how to refer to columns by name in j.\nReferring columns by name in j (just like data.frame) If you are explicitly calling out the names, then you can follow the data.frame way of calling the column names. However, if you have stored the column names in a vector than there are two options -\nA. **Using .. prefix ** - The .. prefix requests the data.table to look for the selected colNames by going \u0026ldquo;up-one-level,\u0026rdquo; I.E., in the global environment. If you are familiar with the Unix terminal, you should be able to connect to the .. command, which also means \u0026ldquo;up-on-level\u0026rdquo;.\n# Calling multimple column names using `..` prefix colNames = c(\u0026#34;Duration\u0026#34;, \u0026#34;County\u0026#34;, \u0026#34;Price\u0026#34;) head(ukHousing[ , ..colNames]) # Output Duration County Price 1: F GREATER MANCHESTER 25000 2: F THURROCK 42500 3: F SOMERSET 45000 4: F BEDFORDSHIRE 43150 5: F WEST YORKSHIRE 18899 6: F WILTSHIRE 81750 B. **Using with argument ** - By default the with argument is set as TRUE. This allows the data.table to refer to the columns as variables, Setting with = FALSE actually disables this property thereby restoring the data.frame mode.\n# Calling multimple column names using `with` argumnet colNames = c(\u0026#34;Duration\u0026#34;, \u0026#34;County\u0026#34;, \u0026#34;Price\u0026#34;) head(ukHousing[ , colNames, with = FALSE]) # Output Duration County Price 1: F GREATER MANCHESTER 25000 2: F THURROCK 42500 3: F SOMERSET 45000 4: F BEDFORDSHIRE 43150 5: F WEST YORKSHIRE 18899 6: F WILTSHIRE 81750 TO DESELECT THE COLUMNS YOU CAN USE ! or -.\nHow to summarize larger list of variables To summarise a large list of variables in data.table you can use .SD and .SDCols operators. Here SD stands for subset of data.\nIn the below code snippet, we will see how to get the following:\n1.Mean of multiple variables\nukHousing[, lapply(.SD, mean), .SDcols = c(\u0026#34;Price\u0026#34;, \u0026#34;var2\u0026#34;)] 2.Getting summary statistics of all the numeric variable\nukHousing[, lapply(.SD, mean)] 3.using UDF for calculating different statistics\nukHousing[, lapply(.SD, function(x) c(mean = median(x), mode(x)))] Aggregations using by in data.table Now that we have learned how to usei as WHERE or ORDER BY and j as SELECT or UPDATE from data.table its time to learn how we can combine these two with by to perform data operations by groups.\nHow to get number of rows by District The below code will return the top 5 and below 5 results. Also, note if you do not pass the name of the column in j it will be named as N.\n\rbyExample1 \u0026lt;- ukHousing[, .(Count = .N), by = .(District)]\rbyExample1\r# Output\rDistrict Count\r1: OLDHAM 76576\r2: THURROCK 69498\r3: SEDGEMOOR 52762\r4: NORTH BEDFORDSHIRE 2801\r5: LEEDS 299133\r--- 450: CITY OF DERBY 87152\r451: RADNOR 13\r452: BRYHER 1\r453: ISLES OF SCILLY 397\r454: ST MARTIN'S 2\rCompare average prices of old and new houses in LEEDS District To calculate this, we need to do the following things:\n Take the subset of data WHERE District == \u0026ldquo;LEEDS\u0026rdquo; - This will go in i Take Average of Price variable and rename it - This will go in j Finally,a group by on the Old/New Variable - This will go in by  \rbyExample2 \u0026lt;- ukHousing[District == \u0026quot;LEEDS\u0026quot;,\r.(Average_House_Price = mean(Price)),\rby = .(`Old/New`)]\rbyExample2\r# Output\rOld/New Average_House_Price\r1: N 131776.4\r2: Y 152065.4\rYOU CAN ALSO PASS MULTIPLE COLUMNS SEPARATED BY (,) IN by.\nbyExample3 \u0026lt;- ukHousing[District == \u0026quot;LEEDS\u0026quot;,\r.(Average_House_Price = mean(Price)),\rby = .(`Old/New`, Duration)]\r# Outlook\rOld/New Duration Average_House_Price\r1: N F 133247.2\r2: N L 120133.6\r3: Y F 164630.3\r4: Y L 136957.9\r5: Y U 98157.0\r6: N U 56837.5\rHow to get ordered results by grouping variable in data.table Although data.table retains the original order of groups by design, at times, you may be required to sort the values by each group. One may be interested in doing so to understand top performers in each group. You can achieve this by changing by to keyby. This will automatically update the values within each group in the ascending order. Below code results can be compared with the previous one, and you will notice that it is not ordered in ascending order.\nkeyby also sets a key after ordering the values by setting an attribute called sorted.\n\rbyExample3 \u0026lt;- ukHousing[District == \u0026quot;LEEDS\u0026quot;,\r.(Average_House_Price = mean(Price)),\rkeyby = .(`Old/New`, Duration)]\rbyExample3\r# Output\rOld/New Duration Average_House_Price\r1: N F 133247.2\r2: N L 120133.6\r3: N U 56837.5\r4: Y F 164630.3\r5: Y L 136957.9\r6: Y U 98157.0\rHow to write Sub Queries like SQL using Chaining operation Chaining is a process using which we can avoid intermediate assignments of temporary variables. Here the results of the previous operation are passed directly to the next one.\nIn the below code, I will order the output of the previous code by Average_House_Price variable but in descending order.\nbyExample4 \u0026lt;- ukHousing[District == \u0026quot;LEEDS\u0026quot;,\r.(Average_House_Price = mean(Price)),\rkeyby = .(`Old/New`, Duration)][order(-Average_House_Price)]\rbyExample4\r# Output\rOld/New Duration Average_House_Price\r1: Y F 164630.3\r2: Y L 136957.9\r3: N F 133247.2\r4: N L 120133.6\r5: Y U 98157.0\r6: N U 56837.5\rUsing data.table for joining large tables Merging tables in data.table is very similar to data.frame. You can merge tables using merge() function. However, in data.table The merging is done based on the common key variable as a primary key. On the other hand, data.frame takes a common variable as a primary key to merge.\nFor this exercise, we will first define two tables, as given below.\n\r# Defining the tables\rdata.table1 \u0026lt;- data.table(primaryKey = letters[rep(1:10)], X= 1:10, key = \u0026quot;primaryKey\u0026quot;)\rdata.table2 \u0026lt;- data.table(primaryKey = letters[rep(2:8)], Y= 10:1, key = \u0026quot;primaryKey\u0026quot;)\r# Printing the output\r\u0026gt; data.table1\rA X\r1: a 1\r2: b 2\r3: c 3\r4: d 4\r5: e 5\r6: f 6\r7: g 7\r8: h 8\r9: i 9\r10: j 10\r\u0026gt; data.table2\rA Y\r1: b 10\r2: b 3\r3: c 9\r4: c 2\r5: d 8\r6: d 1\r7: e 7\r8: f 6\r9: g 5\r10: h 4\rWe will now look at how to get the common elements between the two by doing inner join.\nmerge(data.table1, data.table2, by = \u0026quot;primaryKey\u0026quot;)\r# Output\rprimaryKey X Y\r1: b 2 10\r2: b 2 3\r3: c 3 9\r4: c 3 2\r5: d 4 8\r6: d 4 1\r7: e 5 7\r8: f 6 6\r9: g 7 5\r10: h 8 4\rTo perform Left Join, we need to pass all.x = TRUE argument. Below are the code snippet and its output.\n\rmerge(data.table1, data.table2, by = \u0026quot;primaryKey\u0026quot;, all.x = TRUE)\rprimaryKey X Y\r1: a 1 NA\r2: b 2 10\r3: b 2 3\r4: c 3 9\r5: c 3 2\r6: d 4 8\r7: d 4 1\r8: e 5 7\r9: f 6 6\r10: g 7 5\r11: h 8 4\r12: i 9 NA\r13: j 10 NA\rI am sure with this example, you will be able to figure out how to perform other joins like Right Join, Full Join, and other joins. If not please refer the documentation of data.table package.\nMust-know functions from data.table package Below is the list of some must-know functions from data.table package. For this section, we will not be sharing the output.\nHow to determine duplicated rows in data.table There are a couple of functions that we can use from data.table to deal with duplicated rows. The use of a particular function depends on the task you want to achieve.\n1.unique() - the function returns a data table with all the duplicated rows removed. The function also can be used to specify a particular column by which you wish to check for duplicated values.\n# Removing duplicates considering all variables\runique(df)\r# Removing duplicates considering a particular variable(s)\runique(df, by = \u0026quot;var1\u0026quot;)\r2.duplicated() - The output of this function is a logical vector indicating which rows are duplicates.\n# getting logical vectors indicating duplicate rows\rduplicated(df)\r3.anyDuplicated() - The function is similar to the duplicated() function. The only difference is that this function returns inter values as output. It returns index i of the first duplicated entry if there is one, and 0 otherwise.\nanyDuplicated(df, by=c(\u0026quot;Var1\u0026quot;))\rHow to define range in data.table between() function can be used to define a range. The range generated includes values of both start and end values. You can use this function to check if the values of a variable lie between a certain range of values.\n# Getting houses prices where prices range between 100k and 200k\rukHousing(Price %between% c(100000, 200000))\rHow to reshape large datasets faster in data.table dcast.data.table and melt.data.table are two functions which provides a very fast version of reshape2:dcast() and reshape2:melt. These functions can handle very large datasets quite efficiently and are also able to manage memory quite efficiently in comparison to functions from reshape2 package.\ndcast(df, time ~ variable, fun=mean)\rmelt(df, id=1:2, measure=\u0026quot;f_1\u0026quot;)\rHow to rank large datasets using data.table data.table provides a function named frank() to achieve faster ranking over the large datasets. The function is similar to base rank() function but performance-wise it is much faster. You can think of this function as a translation of RANK OVER PARTITION windows function in SQL.\nThe function is capable of accepting vectors, lists, data.frames, or data.tables as input.\nx = c(4, 1, 4, NA, 1, NA, 4)\rdf = data.table(x, y=c(1, 1, 1, 0, NA, 0, 2))\rfrank(df, cols=\u0026quot;x\u0026quot;)\rSome essential set of functions The set functions consists of union, intersect, setdiff and setequal. These functions can be very crucial when working with multiple datasets. The data.table package in R provides a set of these functions which perform these tasks at a super fast speed when it comes to large datasets.\n fintersect will return copies of common rows. fsetdiff will return copies of rows that are not common. funion will return copies of all the rows. fsetequal will return FALSE unless all the rows are similar.  How to write large datasets to the local You can use fwrite() function to quickly write the larger file back to your local system.\nHow to generate lead/lag values for time series with data.table To generate lead/lag values, the data.table provides shift() function.\n# Shifting data by 1 lag\rdf \u0026lt;- data.table(x = seq(1, 10, 2))\rdf[, x1:= shift(x, 1, type = \u0026quot;lag\u0026quot;)]\r# Output\r\u0026gt; df\rx x1\r1: 1 NA\r2: 3 1\r3: 5 3\r4: 7 5\r5: 9 7\rTo get the leading values in the next column, all you need to do is mention type = \u0026ldquo;lead\u0026rdquo;. I encourage you to try it on your local machine.\nIn this chapter, we learned how to use data.table to deal with very large datasets with efficient memory utilization. This package provides an excellent solution for data wrangling tasks in R. In the next tutorial, we will talk about dplyr package. We understand that data.table can become a bit complicated, and for simplicity, some prefer using dplyr package.\n"});index.add({'id':11,'href':'/posts/goisforlovers/','title':"(Hu)go Template Primer",'content':"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\r Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\r Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\r Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\r Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\r Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}\r Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\r Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\r{{ . }}\r{{ end }}\r Example 2: Declaring value variable name\n{{range $element := array}}\r{{ $element }}\r{{ end }}\r Example 2: Declaring key and value variable name\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\r Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\r Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\r is the same as\n{{ eq 1 1 | if }} Same {{ end }}\r It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\r Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\r Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\r Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\r Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\rtitle: \u0026quot;Permalinks\u0026quot;\rdate: \u0026quot;2013-11-18\u0026quot;\raliases:\r- \u0026quot;/doc/permalinks/\u0026quot;\rgroups: [\u0026quot;extras\u0026quot;]\rgroups_weight: 30\rnotoc: true\r---\rHere is the corresponding code inside of the template:\n {{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}}\rAn alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt;\r\u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt;\r\u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot;\ralt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}}\rFinally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r"});index.add({'id':12,'href':'/posts/hugoisforlovers/','title':"Getting Started with Hugo",'content':"Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Press ctrl+c to stop\r Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026gt; Press ctrl+c to stop\r Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 26 ms\r Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n"});index.add({'id':13,'href':'/docs/quick-r-tutorial/','title':"Quick R Tutorial",'content':""});index.add({'id':14,'href':'/posts/','title':"Blog",'content':""});})();